"""
Django settings for wantashi project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hv-efhi9*wfnoe=(rh6x$1hrq46#+lpvltf$4*wz$@!gr@h!pf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'gestion',
    'widget_tweaks',
    'django.contrib.humanize',

    #double  authentification avec qrcode
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
    'qrcode',

    #HTTPS
    'django_extensions',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    #double  authentification avec qrcode
'django_otp.middleware.OTPMiddleware',
]

ROOT_URLCONF = 'wantashi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'gestion/templates/gestion'],  # Ajoute ce chemin pour Django
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'gestion.context_processors.menu_sections',   # Ajoutez votre context
                'gestion.context_processors.annee_scolaire_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'wantashi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

# Correction de l'ordre et de la configuration des dossiers statiques
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Dossier statique principal en premier
    BASE_DIR / "gestion/static",  # Dossier statique de l'application
]

# Répertoire où les fichiers statiques seront collectés pour le déploiement
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'gestion.CustomUser'

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.ERROR: 'danger',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
}

#OTP settings
OTP_TOTP_ISSUER = "CS Wantashi"


# SECURITY WARNING: update this when moving to production
#ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', '192.168.66.95']

import socket
import os

# Obtenir l'adresse IP locale de manière plus robuste
def get_local_ip():
    try:
        # Méthode 1: Connexion à une adresse externe
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        try:
            # Méthode 2: Utilisation de gethostbyname
            hostname = socket.gethostname()
            ip = socket.gethostbyname(hostname)
            return ip
        except Exception:
            # Méthode 3: Valeur par défaut
            return '127.0.0.1'

# Configuration de l'adresse IP statique du serveur
# Vous pouvez également définir cette variable d'environnement
SERVER_IP = os.environ.get('SERVER_IP', '192.168.100.188')

# Configuration des hôtes autorisés
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    SERVER_IP,  # Votre adresse IP statique
]

# Charger les paramètres locaux s'ils existent
try:
    from config.local_settings import *
    # Si SERVER_IP est défini dans local_settings, utilisez-le
    if 'SERVER_IP' in globals():
        if SERVER_IP not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(SERVER_IP)
except ImportError:
    pass



# Configuration HTTPS - pour développement local
SECURE_SSL_REDIRECT = False  # Désactivé en développement pour éviter les problèmes de redirection
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_HSTS_SECONDS = 0  # Désactivé en développement
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SESSION_COOKIE_SECURE = False  # Désactivé en développement
CSRF_COOKIE_SECURE = False     # Désactivé en développement

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Pour débogage
EMAIL_HOST = 'smtp.gmail.com'  # Utilisez le client SMTP réel dans un environnement de production
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'astuce.tag001l@gmail.com'
EMAIL_HOST_PASSWORD = 'astuce.tag@gmail'
DEFAULT_FROM_EMAIL = 'webmaster@localhost'


LOGIN_URL = '/login/'
# Configuration des logs pour Waitress
# Configuration des logs simplifiée pour Waitress
import logging

# Configuration de base pour afficher les logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)

# Activer les logs Django
import django
from django.conf import settings

if not settings.configured:
    django.setup()


import os
from pathlib import Path

# Configuration des logs pour enregistrer dans un fichier
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'simple',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'waitress': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Créer le dossier logs s'il n'existe pas
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)
